--- added foreign primary keys
ALTER TABLE ACCOUNTCLASSES 
ADD PRIMARY KEY("ID");
ALTER TABLE ACCOUNTS
ADD PRIMARY KEY("ID");
ALTER TABLE BRANCHES
ADD PRIMARY KEY("ID");
ALTER TABLE CARDS
ADD PRIMARY KEY("ID");
ALTER TABLE CUSTOMERS
ADD PRIMARY KEY("ID");
ALTER TABLE TRANSACTIONS 
ADD PRIMARY KEY("ID");


ALTER TABLE ACCOUNTS 
ADD CONSTRAINT FK_ACCOUNT_CUSTOMER
FOREIGN KEY (CUSTOMER_ID)
REFERENCES CUSTOMERS(ID);

ALTER TABLE CARDS
ADD CONSTRAINT FK_CARDS_CUSTOMER
FOREIGN KEY (CUSTOMER_ID)
REFERENCES CUSTOMERS(ID);

ALTER TABLE CARDS
ADD CONSTRAINT FK_CARDS_ACCOUNT 
FOREIGN KEY (ACCOUNT_ID)
REFERENCES ACCOUNTS(ID);

ALTER TABLE ACCOUNTS
ADD CONSTRAINT FK_ACCOUNTS_ACCOUNTCLASSES 
FOREIGN KEY (ACCOUNT_CLASS_ID)
REFERENCES ACCOUNTCLASSES(ID);

ALTER TABLE CUSTOMERS
ADD CONSTRAINT FK_CUSTOMER_BRANCHES
FOREIGN KEY (OPEN_BRANCH_ID)
REFERENCES BRANCHES(ID);

ALTER TABLE ACCOUNTS 
ADD CONSTRAINT FK_ACCOUNTS_BRANCHES 
FOREIGN KEY (OPEN_BRANCH)
REFERENCES BRANCHES(ID);

ALTER TABLE TRANSACTIONS  
ADD CONSTRAINT FK_TRANSACTION_ACCOUNT 
FOREIGN KEY (DEBIT_ACC_ID)
REFERENCES ACCOUNTS(ID);

ALTER TABLE TRANSACTIONS  
ADD CONSTRAINT FK_TRANSACTION_ACCOUNT_CREDIT 
FOREIGN KEY (CREDIT_ACC_ID)
REFERENCES ACCOUNTS(ID);

ALTER TABLE TRANSACTIONS  
ADD CONSTRAINT FK_TRANSACTION_BRANCH
FOREIGN KEY (TRANSACTION_BRANCH_ID)
REFERENCES BRANCHES(ID);

-- added data into ACCOUNTCLASSES table

INSERT ALL 
 
INTO ACCOUNTCLASSES ( SHORT_DESCRIPTION , LONG_DESCRIPTION ) VALUES(  'Credit', 'Cont de credit') 
INTO ACCOUNTCLASSES ( SHORT_DESCRIPTION , LONG_DESCRIPTION  ) VALUES(  'Debit', 'Cont de debit')
INTO ACCOUNTCLASSES ( SHORT_DESCRIPTION , LONG_DESCRIPTION  ) VALUES(  'Econo', 'Cont de economii')

SELECT 1 FROM dual;

SELECT * FROM  ACCOUNTCLASSES;

-- added data into BRANCHES table

INSERT INTO BRANCHES ( SHORT_DESCRIPTION , LONG_DESCRIPTION, ADDRESS, PARENT_BRANCH_ID  ) VALUES('SCLUJ', 'Sucursala Principala Cluj', 'str Avram Iancu, nr 23',0);

INSERT ALL 
 
INTO BRANCHES ( SHORT_DESCRIPTION , LONG_DESCRIPTION, ADDRESS, PARENT_BRANCH_ID  ) VALUES('SCLUJ', 'Sucursala Principala Cluj', 'str Avram Iancu, nr 23',1)
INTO BRANCHES ( SHORT_DESCRIPTION , LONG_DESCRIPTION, ADDRESS, PARENT_BRANCH_ID  ) VALUES('DOROB', 'Sucursala Dorobantilor Cluj', 'str Dorobantilor, nr 59',1)
INTO BRANCHES ( SHORT_DESCRIPTION , LONG_DESCRIPTION, ADDRESS, PARENT_BRANCH_ID  ) VALUES('MARAS', 'Sucursala Marasti Cluj', 'str Dambovita, nr 105',1)
INTO BRANCHES ( SHORT_DESCRIPTION , LONG_DESCRIPTION, ADDRESS, PARENT_BRANCH_ID  ) VALUES('BZIUA', 'Sucursala Buna Ziua Cluj', 'str Buna ziua, nr 15',1)
INTO BRANCHES ( SHORT_DESCRIPTION , LONG_DESCRIPTION, ADDRESS, PARENT_BRANCH_ID  ) VALUES('BARIT', 'Sucursala Baritiu Cluj', 'str G Baritiu, nr 50',1)

SELECT 1 FROM dual;

SELECT * FROM  BRANCHES;

-- added data into CUSTOMERS table

INSERT ALL 
 
INTO CUSTOMERS ( FIRST_NAME , LAST_NAME , DATE_OF_BIRTH, STATUS , OPEN_BRANCH_ID , INSERTED_DATE, INSERTED_BY ) VALUES('Emil','Popescu', '10-12-1990', 'activ',3, '16-05-2021','Ana Pop') 
INTO CUSTOMERS ( FIRST_NAME , LAST_NAME , DATE_OF_BIRTH, STATUS , OPEN_BRANCH_ID , INSERTED_DATE, INSERTED_BY ) VALUES('Ion','Ionescu', '10-05-1993', 'activ',4, '10-03-2021','Ana Pop') 
INTO CUSTOMERS ( FIRST_NAME , LAST_NAME , DATE_OF_BIRTH, STATUS , OPEN_BRANCH_ID , INSERTED_DATE, INSERTED_BY ) VALUES('Ana','Cristescu', '10-12-1992', 'activ',3, '14-05-2021','Ana Pop') 
INTO CUSTOMERS ( FIRST_NAME , LAST_NAME , DATE_OF_BIRTH, STATUS , OPEN_BRANCH_ID , INSERTED_DATE, INSERTED_BY ) VALUES('Dan','Nicolae', '15-04-1987', 'activ',5, '11-05-2021','Ana Pop') 
INTO CUSTOMERS ( FIRST_NAME , LAST_NAME , DATE_OF_BIRTH, STATUS , OPEN_BRANCH_ID , INSERTED_DATE, INSERTED_BY) VALUES('Maria','Popescu', '10-05-1992', 'activ',3, '12-01-2021','Ana Pop') 
INTO CUSTOMERS ( FIRST_NAME , LAST_NAME , DATE_OF_BIRTH, STATUS , OPEN_BRANCH_ID , INSERTED_DATE, INSERTED_BY ) VALUES('Ioana','Ionescu', '10-10-1991', 'activ',4, '05-05-2021','Ana Pop') 
INTO CUSTOMERS ( FIRST_NAME , LAST_NAME , DATE_OF_BIRTH, STATUS , OPEN_BRANCH_ID , INSERTED_DATE, INSERTED_BY ) VALUES('Vlad','Vladescu', '11-06-1978', 'activ',5, '20-02-2021','Ana Pop') 
INTO CUSTOMERS ( FIRST_NAME , LAST_NAME , DATE_OF_BIRTH, STATUS , OPEN_BRANCH_ID , INSERTED_DATE, INSERTED_BY ) VALUES('Viviana','Nicolae', '15-08-1983', 'activ',3, '10-02-2021','Ana Pop') 
INTO CUSTOMERS ( FIRST_NAME , LAST_NAME , DATE_OF_BIRTH, STATUS , OPEN_BRANCH_ID , INSERTED_DATE, INSERTED_BY ) VALUES('Radu','Vlad', '15-09-1990', 'activ',5, '20-02-2021','Ana Pop') 
 
SELECT 1 FROM dual;

SELECT * FROM  CUSTOMERS;

-- added data into ACCOUNTS table
INSERT ALL 
 
INTO ACCOUNTS ( ACCOUNT_NUMBER , CURRENCY , IBAN, ACCOUNT_CLASS_ID , AVAILABLE_BALANCE ,STATUS, CUSTOMER_ID, OPEN_BRANCH , INSERTED_DATE, INSERTED_BY ) VALUES('1234-2345-5324-2345','RON', 'BTRONCRT223237773236', 3 , 5321, 'activ',1, 3, '16-05-2021','Ana Pop') 
INTO ACCOUNTS ( ACCOUNT_NUMBER , CURRENCY , IBAN, ACCOUNT_CLASS_ID , AVAILABLE_BALANCE ,STATUS, CUSTOMER_ID, OPEN_BRANCH , INSERTED_DATE, INSERTED_BY ) VALUES('4576-7643-5322-4321','RON', 'BTRONCRT123076766236', 4 , 136, 'activ',2, 1,'10-03-2021','Ion Popescu') 
INTO ACCOUNTS ( ACCOUNT_NUMBER , CURRENCY , IBAN, ACCOUNT_CLASS_ID , AVAILABLE_BALANCE ,STATUS, CUSTOMER_ID, OPEN_BRANCH , INSERTED_DATE, INSERTED_BY ) VALUES('6578-1236-6734-2222','RON', 'BTRONCRT254646623236', 4 , 678, 'activ',3, 3,'14-05-2021','Ana Pop') 
INTO ACCOUNTS ( ACCOUNT_NUMBER , CURRENCY , IBAN, ACCOUNT_CLASS_ID , AVAILABLE_BALANCE ,STATUS, CUSTOMER_ID, OPEN_BRANCH , INSERTED_DATE, INSERTED_BY ) VALUES('3568-2345-1234-3333','RON', 'BTRONCRT254595332336', 4 , 987, 'activ',3, 4,'11-05-2021','Dan Pop') 
INTO ACCOUNTS ( ACCOUNT_NUMBER , CURRENCY , IBAN, ACCOUNT_CLASS_ID , AVAILABLE_BALANCE ,STATUS, CUSTOMER_ID, OPEN_BRANCH , INSERTED_DATE, INSERTED_BY ) VALUES('5353-9864-5546-4444','RON', 'BTRONCRT787978787876', 5 , 15000, 'activ',2, 5, '12-01-2021','Ana Pop') 
INTO ACCOUNTS ( ACCOUNT_NUMBER , CURRENCY , IBAN, ACCOUNT_CLASS_ID , AVAILABLE_BALANCE ,STATUS, CUSTOMER_ID, OPEN_BRANCH , INSERTED_DATE, INSERTED_BY ) VALUES('3564-7635-7444-2555','RON', 'BTRONCRT623454545456', 5 , 13700, 'activ',3, 4, '05-05-2021','Dan Pop') 
INTO ACCOUNTS ( ACCOUNT_NUMBER , CURRENCY , IBAN, ACCOUNT_CLASS_ID , AVAILABLE_BALANCE ,STATUS, CUSTOMER_ID, OPEN_BRANCH , INSERTED_DATE, INSERTED_BY ) VALUES('4321-6546-3546-7999','RON', 'BTRONCRT787424440036', 4 , 10000, 'activ',7, 1, '20-02-2021','Ion Popescu') 
INTO ACCOUNTS ( ACCOUNT_NUMBER , CURRENCY , IBAN, ACCOUNT_CLASS_ID , AVAILABLE_BALANCE ,STATUS, CUSTOMER_ID, OPEN_BRANCH , INSERTED_DATE, INSERTED_BY ) VALUES('3433-7655-6536-6531','RON', 'BTRONCRT093210000036', 4 , 8000, 'activ',8, 1, '10-02-2021','Ion Popescu') 
INTO ACCOUNTS ( ACCOUNT_NUMBER , CURRENCY , IBAN, ACCOUNT_CLASS_ID , AVAILABLE_BALANCE ,STATUS, CUSTOMER_ID, OPEN_BRANCH , INSERTED_DATE, INSERTED_BY ) VALUES('4342-4211-5456-3452','RON', 'BTRONCRT223111142736', 4 , 6890, 'activ',9, 6, '20-02-2021','Maria David') 
 
SELECT 1 FROM dual;

INSERT ALL 
 
INTO CARDS ( CARD_NUMBER , CVV ,  CUSTOMER_ID, ACCOUNT_ID, EXPIRE_DATE ) VALUES ('1234-2345-5324-2345','345',  3 ,  1, '16-05-2025') 
INTO CARDS ( CARD_NUMBER , CVV ,  CUSTOMER_ID, ACCOUNT_ID, EXPIRE_DATE ) VALUES ('4576-7643-5322-4321','459',  4 ,  2, '10-03-2025') 
INTO CARDS ( CARD_NUMBER , CVV ,  CUSTOMER_ID, ACCOUNT_ID, EXPIRE_DATE ) VALUES ('6578-1236-6734-2222','986',  4 ,  3, '14-05-2025') 
INTO CARDS ( CARD_NUMBER , CVV ,  CUSTOMER_ID, ACCOUNT_ID, EXPIRE_DATE ) VALUES ('3568-2345-1234-3333','646',  4 ,  4, '11-05-2025') 
INTO CARDS ( CARD_NUMBER , CVV ,  CUSTOMER_ID, ACCOUNT_ID, EXPIRE_DATE ) VALUES ('5353-9864-5546-4444','567',  5 ,  5, '12-01-2025') 
INTO CARDS ( CARD_NUMBER , CVV ,  CUSTOMER_ID, ACCOUNT_ID, EXPIRE_DATE ) VALUES ('3564-7635-7444-2555','987',  5 ,  6, '05-05-2025') 
INTO CARDS ( CARD_NUMBER , CVV ,  CUSTOMER_ID, ACCOUNT_ID, EXPIRE_DATE ) VALUES ('4321-6546-3546-7999','147',  4 ,  7, '20-02-2025') 
 
SELECT 1 FROM dual;

select * from transactions;

-- added data into TRANSACTIONS table

INSERT ALL 
 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 14, 'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 11,  'SUCCES', '18-06-2021') 

INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 12,  'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 13, 'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 14,  'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 15, 'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 16, 'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 17,'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 18,  'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 19,  'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 8,  'SUCCES', '18-06-2021') 
INTO TRANSACTIONS ( DEBIT_ACC_ID , CREDIT_ACC_ID ,  TRANSACTION_BRANCH_ID, AMOUNT, STATUS,INSERTED_DATE ) VALUES (1,1,  1 , 9,  'SUCCES', '18-06-2021') 


 
SELECT 1 FROM dual;

 SELECT * FROM CARDS;

SELECT * FROM  CUSTOMERS;
SELECT * FROM ACCOUNTS;
SELECT * FROM ACCOUNTCLASSES;
SELECT * FROM TRANSACTIONS;
SELECT * FROM BRANCHES;

updat

SELECT CREDIT_ACC_ID    FROM TRANSACTIONS  
WHERE  AMOUNT >=10
GROUP BY CREDIT_ACC_ID HAVING COUNT(AMOUNT)>=10 ;
 

SELECT ACCOUNTS.ID,TRANSACTIONS.CREDIT_ACC_ID
FROM ACCOUNTS
LEFT JOIN TRANSACTIONS
ON ACCOUNTS.ID = TRANSACTIONS.CREDIT_ACC_ID;
 
 
 
 
 --PROBLEMA 1
 SELECT   CT.FIRST_NAME,CT.LAST_NAME,CR.ID, CR.CARD_NUMBER ,AC.ACCOUNT_CLASS_ID  ,TR.DEBIT_ACC_ID, TR.CREDIT_ACC_ID,SUM(TR.AMOUNT) FROM ((CUSTOMERS CT INNER JOIN ACCOUNTS AC 
 ON CT.ID=AC.CUSTOMER_ID)     INNER JOIN TRANSACTIONS TR
 ON AC.ID =TR.CREDIT_ACC_ID)  INNER JOIN CARDS CR ON
 AC.ID=CR.ACCOUNT_ID
 WHERE TR.AMOUNT>=10   GROUP BY CT.FIRST_NAME,CT.LAST_NAME,CR.ID, CR.CARD_NUMBER ,AC.ACCOUNT_CLASS_ID   ,TR.DEBIT_ACC_ID, TR.CREDIT_ACC_ID HAVING COUNT(TR.AMOUNT)>=10 ;






--PROBLEMA 2
SELECT LONG_DESCRIPTION,ADDRESS,PARENT_BRANCH_ID, CHECK_TRANSACTION(ID) FROM BRANCHES 
START WITH ID=1  CONNECT BY PRIOR ID=PARENT_BRANCH_ID ORDER SIBLINGS BY ID;

CREATE OR REPLACE FUNCTION CHECK_TRANSACTION
( CHOSEN_BRANCH IN NUMBER ) RETURN VARCHAR2
IS
OK1  := VARCHAR2(200);
COUNTER NUMBER;
BEGIN
SELECT COUNT(ID) INTO COUNTER FROM TRANSACTIONS WHERE TRANSACTION_BRANCD_ID=CHOSEN_BRANCH;
IF COUNTER>0 THEN
OK1:='THERE ARE TRANSACTIONS';
ELSE
OK1:='THERE ARE NOT TRANSACTIONS';
END IF;
RETURN OK1;
END CHECK_TRANSACTION;


--PROBLEMA 3
CREATE TABLE UPDATED_CUSTOMER
(ID   NUMBER(38), 
FIRST_NAME VARCHAR2(200),
LAST_NAME VARCHAR2(200),
DATE_OF_BIRTH DATE,
STATUS VARCHAR2(20)
);

SELECT  * FROM UPDATED_CUSTOMER;

CREATE OR REPLACE PROCEDURE UPDATE_CUSTOMERS
(ID_CUSTOMER IN NUMBER, FIRST_NAME_CUSTOMER IN VARCHAR2,LAST_NAME_CUSTOMER IN VARCHAR2,DATE_OF_BIRTH_CUSTOMER IN DATE, STATUS_CUSTOMER IN VARCHAR2)
IS 
BEGIN
UPDATE CUSTOMERS 
SET ID=ID_CUSTOMER , FIRST_NAME=FIRST_NAME_CUSTOMER  ,LAST_NAME=LAST_NAME_CUSTOMER ,DATE_OF_BIRTH=DATE_OF_BIRTH_CUSTOMER , STATUS=STATUS_CUSTOMER
WHERE ID=ID_CUSTOMER;
INSERT INTO UPDATED_CUSTOMER(FIRST_NAME, LAST_NAME, DATE_OF_BIRTH,STATUS) VALUES(ID_CUSTOMER ,  FIRST_NAME_CUSTOMER  , LAST_NAME_CUSTOMER , DATE_OF_BIRTH_CUSTOMER , STATUS_CUSTOMER)
END UPDATE_CUSTOMERS;


-- PROBLEMA 4
CREATE OR REPLACE FUNCTION HOLIDAY
(X IN NUMBER
)
RETURN DATE AS

I NUMBER(38):=0
WD NUMBER(38):=0 
FIN VARCHAR2(200);
HOLIDAY_INPUT VARCHAR2(200);
LETTER VARCHAR2(1);
ACTUAL_DATE  DATE;
M NUMBER;
D NUMBER();
DD NUMBER;
BEGIN

BEGIN

SELECT SYSDATE INTO ACTUAL_DATE FROM DUAL;
D:=EXTRACT (DAY FROM ACTUAL_DATE);
M:=EXTRACT (MONTH FROM ACTUAL_DATE);

 WHILE WD<X
 LOOP
      DBMS_OUTPUT.PUT_LINE(TO_CHAR(EXTRACT(YEAR FROM ACTUAL_DATE))); 
      DBMS_OUTPUT.PUT_LINE(TO_CHAR(EXTRACT(MONTH FROM ACTUAL_DATE))); 
      DBMS_OUTPUT.PUT_LINE(ACTUAL_DATE);
      DBMS_OUTPUT.PUT_LINE(HOLIDAY_INPUT);
 SELECT HOLIDAY_LIST INTO HOLIDAY_INPUT FROM HOLIDAYS WHERE YEAR=TO_CHAR(EXTRACT(YEAR FROM ACTUAL_DATE)) AND MONTH=TO_CHAR(EXTRACT(MONTH FROM ACTUAL_DATE));
  
  FOR I IN D..LENGTH(HOLIDAY_INPUT)
  LOOP
  LETTER  := SUBSTR(HOLIDAY_INPUT,I,1);
  IF LETTER='W' AND WD<X THEN
    WD:=WD+1;
     
     DD:=I;
     
   
  END IF;
  

  END LOOP;
  
  IF WD<X THEN
 
  ACTUAL_DATE:=TRUNC(ACTUAL_DATE, 'MONTH');
  ACTUAL_DATE:=ADD_MONTHS(ACTUAL_DATE,1);
  D:=1;
  END IF;
  END LOOP;
  
  ACTUAL_DATE:=TRUNC(ACTUAL_DATE, 'MONTH')+DD;
   DBMS_OUTPUT.PUT_LINE(ACTUAL_DATE); 
   
  RETURN ACTUAL_DATE;
END HOLIDAY;

--PROBLEMA 5

UPDATE ACCOUNTS
SET ACCOUNTS.AVAILABLE_BALANCE=A.AVAILABLE_BALANCE-T.AMOUNT 
FROM ACCOUNTS A INNER JOIN TRANSACTIONS T
ON A.ID = T.DEBIT_ACC_ID ORDER BY T.ID ;


UPDATE ACCOUNTS AC
SET  AC.AVAILABLE_BALANCE =(SELECT (AC.AVAILABLE_BALANCE-SUM(TR.AMOUNT)) FROM TRANSACTIONS TR WHERE AC.ID = TR.DEBIT_ACC_ID ) WHERE AC.ID IS NOT NULL;

UPDATE ACCOUNTS AC
SET  AC.AVAILABLE_BALANCE =(SELECT (AC.AVAILABLE_BALANCE+SUM(TR.AMOUNT)) FROM TRANSACTIONS TR WHERE AC.ID = TR.CREDIT_ACC_ID ) WHERE AC.ID IS NOT NULL;


SELECT * FROM ACCOUNTS;
SELECT * FROM TRANSACTIONS;
SELECT * FROM customers;













